version: '3.4'

services:
  php:
    container_name: php
    build:
      context: ./api
      target: api_platform_php
      args:
        SYMFONY_VERSION: ${SYMFONY_VERSION:-}
        STABILITY: ${STABILITY:-stable}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - db
    volumes:
      # Comment out the next line in production
      - ./api:/srv/api:rw,cached
      # If you develop on Linux, comment out the following volumes to just use bind-mounted project directory from host
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
      - /srv/api/var/
      - /srv/api/var/cache/
      - /srv/api/var/logs/
      - /srv/api/var/sessions/
    environment:
      - SYMFONY_VERSION

  api:
    container_name: api
    build:
      context: ./api
      target: api_platform_nginx
    depends_on:
      - php
    volumes:
      # Comment out the next line in production
      - ./api/docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./api/public:/srv/api/public:ro
    ports:
    - '80:80'

  db:
    container_name: db
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=api
      - POSTGRES_PASSWORD=!ChangeMe!
      - POSTGRES_USER=api-platform
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - '5432:5432'

  # Uncomment below and delete the db above to switch from PostgreSQL to MySQL
  # db:
  # In production, you may want to use a managed database service
  # image: mysql:5.7
  # environment:
  # MYSQL_ROOT_PASSWORD: root
  # MYSQL_DATABASE: ngtv
  # MYSQL_USER: userdb
  # You should definitely change the password in production
  # MYSQL_PASSWORD: psw
  # volumes:
  # - db-data:/var/lib/mysql:rw
  # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
  # - ./docker/db/data:/var/lib/mysql:rw
  # ports:
  # - '3306:3306'

  client:
    container_name: client
    build:
      context: ./client
      target: api_platform_client
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules

    ports:
      - '81:3000'

  h2-proxy:
    container_name: h2-proxy
    build:
      context: ./api
      target: api_platform_h2-proxy
    depends_on:
      - api
      - client
    volumes:
      - ./api/docker/h2-proxy/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "443:443"
      - "444:444"

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - '8999:8080'
    depends_on:
      - db

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    ports:
      - '1025:1025'
      - '8025:8025'

volumes:
  db-data: {}